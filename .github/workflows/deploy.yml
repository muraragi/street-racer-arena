name: Deploy Application

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: PROD
    outputs:
      built_backend: ${{ steps.build_backend.outputs.built }}
      built_frontend: ${{ steps.build_frontend.outputs.built }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Check for backend changes
        uses: dorny/paths-filter@v3
        id: backend_filter
        with:
          filters: |
            backend:
              - 'apps/backend/**'

      - name: Build and push Backend image
        id: build_backend
        if: steps.backend_filter.outputs.backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: muraragi/street-racing-arena-backend:latest, muraragi/street-racing-arena-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set backend built output
        if: steps.build_backend.outcome == 'success'
        id: set_backend_output
        run: echo "built=true" >> $GITHUB_OUTPUT

      - name: Check for frontend changes
        uses: dorny/paths-filter@v3
        id: frontend_filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'

      - name: Build and push Frontend image
        id: build_frontend
        if: steps.frontend_filter.outputs.frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: muraragi/street-racing-arena-frontend:latest, muraragi/street-racing-arena-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set frontend built output
        if: steps.build_frontend.outcome == 'success'
        id: set_frontend_output
        run: echo "built=true" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Server
    needs: build_and_push
    if: needs.build_and_push.outputs.built_backend == 'true' || needs.build_and_push.outputs.built_frontend == 'true' || github.event.head_commit.message != 'skip deploy'
    runs-on: ubuntu-latest
    environment: PROD

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to Server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DEPLOY_PATH: ~/street-racing-arena
        run: |
          echo "Copying docker-compose.yml and Caddyfile..."
          scp docker-compose.yml Caddyfile ${SSH_USER}@${SSH_HOST}:${DEPLOY_PATH}/

          echo "Connecting to server and deploying..."
          ssh ${SSH_USER}@${SSH_HOST} << EOF
            cd ${DEPLOY_PATH}
            echo "Logging into Docker Hub on server..."
            # Note: Consider alternative auth methods on server if needed (e.g., credential helper)
            # This login might not persist reliably across non-interactive sessions
            # docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

            echo "Pulling latest images..."
            docker compose pull # Pull images defined in compose file (backend, frontend, caddy, postgres)

            echo "Starting services..."
            docker compose up -d --remove-orphans # Start services, remove old containers if config changed

            echo "Cleaning up old images..."
            docker image prune -af # Remove dangling and unused images forcefully

            echo "Deployment complete!"
          EOF
